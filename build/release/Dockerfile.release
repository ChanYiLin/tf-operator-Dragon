# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO(jlewi): We should consider reusing the same DockerFiles as used to create
# the containers used by our test infrastructure. We should probably wait though
# until we get rid of Airflow in our tests.
# However, we don't actually want to use the same Docker images because there
# are broader permissions on our images used in testing and we want to have much
# tighter controls on the code used to build our releases.

# This Dockerfile is used to create a docker image suitable for building
# and releasing the TFJob operator.
FROM golang:1.8.2
LABEL authors="Jeremy Lewi <jlewi@google.com>"

WORKDIR /workspace
RUN mkdir -p /workspace
ENV WORKSPACE=/workspace \
    TERM=xterm

# common util tools
# https://github.com/GoogleCloudPlatform/gsutil/issues/446 for python-openssl
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    curl \
    file \
    rsync \
    ca-certificates \
    build-essential \
    openssh-client \
    git \
    pkg-config \
    zip \
    unzip \
    xz-utils \
    zlib1g-dev \
    python \
    python-setuptools \
    python-openssl \
    && apt-get clean

RUN easy_install pip
# TODO(jlewi): Use pipfile to pull in requirements as specified in the build. See the developer guide
# for instructions on using pipenv. When I tried adding the instructions I got errors trying to
# activate the virtual env by running pipenv shell.
RUN pip install --upgrade six pyyaml google-api-python-client \
    google-cloud-storage pylint jinja2 \
    google-auth-httplib2 kubernetes==4.0.0 mock retrying

# Install gcloud

ENV PATH=/google-cloud-sdk/bin:/workspace:${PATH} \
    CLOUDSDK_CORE_DISABLE_PROMPTS=1

RUN wget -q https://dl.google.com/dl/cloudsdk/channels/rapid/google-cloud-sdk.tar.gz && \
    tar xzf google-cloud-sdk.tar.gz -C / && \
    rm google-cloud-sdk.tar.gz && \
    /google-cloud-sdk/install.sh \
        --disable-installation-options \
        --bash-completion=false \
        --path-update=false \
        --usage-reporting=false && \
    gcloud components install alpha beta kubectl && \
    gcloud info | tee /workspace/gcloud-info.txt

# Install glide
RUN cd /tmp && \
    wget -O glide-v0.13.0-linux-amd64.tar.gz \
            https://github.com/Masterminds/glide/releases/download/v0.13.0/glide-v0.13.0-linux-amd64.tar.gz && \
    tar -xvf glide-v0.13.0-linux-amd64.tar.gz && \
    mv ./linux-amd64/glide /usr/local/bin/

# Install docker
# Docker is used when running locally to build the images.
# Note: 1.11+ changes the tarball format
RUN curl -L "https://get.docker.com/builds/Linux/x86_64/docker-1.9.1.tgz" \
    | tar -C /usr/bin -xvzf- --strip-components=3 usr/local/bin/docker

# Install Helm
# Helm is used to build the helm packages.
RUN wget -O /tmp/get_helm.sh \
    https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get && \
    chmod 700 /tmp/get_helm.sh && \
    /tmp/get_helm.sh && \
    rm /tmp/get_helm.sh

# Initialize helm
RUN helm init --client-only

# Install  Node.js
RUN curl -sL https://deb.nodesource.com/setup_8.x | bash - \
    && apt-get install -y nodejs

# Install yarn
RUN curl -sS http://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \
    && echo "deb http://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list \
    && apt-get update -yqq \
    && apt-get install -yqq --no-install-recommends yarn

RUN mkdir -p /opt/tf_k8s_releaser/py
COPY py /opt/tf_k8s_releaser/py

COPY launch_build.sh /opt/tf_k8s_releaser/
RUN chmod a+x /opt/tf_k8s_releaser/launch_build.sh

ADD ["version.json", "/opt/tf_k8s_releaser/py"]
